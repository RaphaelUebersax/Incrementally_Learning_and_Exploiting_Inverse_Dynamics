function [index_next] = gradient_prop_7d(Candidate_pool, x_current, step, GPR)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% THIS FUNCTION RETURNS INDEX OF THE DATAPOINT IN THE CANDIDATE POOL THAT
% IS CLOSEST TO THE CURRENT DATAPOINT + GRADIENT(VARIANCE)*STEP
%
% Input: - Candidate_pool : (MxP+2) M datapoints of [P-dimensions, target, RBD]
%        - x_current      : (1xP) Last considered datapoint of dimension P
%        - step           : (double) Length of the gradient vector to add
%        - GPR            : (struct) Structure containing all GP Regressor
%
% Ouput: - idx            : (int) Index of next data in Candidate_pool
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fn = fieldnames(GPR);
grad_var = zeros(numel(fn),length(x_current));
for j=1:numel(fn)
    grad_var(j,:) = GPR.(fn{j}).gradient_var(x_current);    
end

[~,idx] = max(sum(grad_var.^2,2));
x_new = x_current + step*grad_var(idx,:);
distances = pdist2(Candidate_pool(:,1:14), x_new, 'squaredeuclidean');
[~,index_next] = min(distances);

end