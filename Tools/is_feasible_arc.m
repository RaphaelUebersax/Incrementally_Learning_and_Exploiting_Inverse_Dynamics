function [answ] = is_feasible_arc(qc,rho,feasibility,x_current,x_next)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% THIS FUNCTION RETURNS A BOOL WHICH IS TRUE IF THE ARC LINKING X_CURRENT
% AND X_NEXT OF THE LIMIT CYLCE IS FEASIBLE
%
% Input: - rho         : (double) Radius of limit cycle
%        - qc          : (double) Center of limit cycle 
%        - feasibility : (struct) Contains feasibility conditions
%        - x_current      : (1xP) Last considered datapoint of dimension P
%        - x_next         : (1xP) Goal datapoint of dimension P
%
%
% Ouput: - answ        : (bool) true if feasibile, false otherwise
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Compute arc
x_center_c = x_current-[qc,0];
theta_c = atan2(x_center_c(2),x_center_c(1));  % Angle of current
x_center_n = x_next-[qc,0];
theta_n = atan2(x_center_n(2),x_center_n(1));  % Angle of next

% ensure positivity of theta_c
if theta_c < 0
    theta_c = theta_c + 2*pi;
end

% ensure positivity of theta_n
if theta_n < 0
    theta_n = theta_n + 2*pi;
end

% COmpute the vector of angle for our arc
if theta_n > theta_c
    th = linspace(theta_c,theta_n-2*pi,100);
elseif theta_n <= theta_c
    th = linspace(theta_c,theta_n,100);  
end

q_arc = rho * cos(th) + qc;
qdot_arc = rho * sin(th) ;


%% Check feasibility
answ = true;

if rho <= 0
    answ = false;
elseif feasibility.q_upper_bound < qc
    answ = false;
elseif feasibility.q_lower_bound > qc
    answ = false;
elseif feasibility.q_upper_bound < max(q_arc)
    answ = false;
elseif feasibility.q_lower_bound > min(q_arc)
    answ = false;
elseif feasibility.qdot_upper_bound <= max(qdot_arc)
    answ = false;
elseif feasibility.qdot_lower_bound >= min(qdot_arc)
    answ = false;
end

end