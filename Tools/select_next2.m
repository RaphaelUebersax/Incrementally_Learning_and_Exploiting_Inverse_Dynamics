function [x_next, I_clust] = select_next2(gm, x_current, GPR, I_clust, robot_step, I_var)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% THIS FUNCTION RETURNS THE NEXT DATAPOINT TO GO TO BY BALANCING
% EXPLORATION AND TASK CONSTRAINTS
%
% Input: - gm             : (object) GMM model fit on task constraints
%        - x_current      : (1xP) Last considered datapoint of dimension P
%        - GPR            : (object) Gaussian Process Regressor
%        - I_clust        : (Mx1) Importance of Gauss Mixture in gm
%        - robot_step     : (double) Step size for one iteration 
%        - I_var          : (double) Importance of variance
%
%
% Ouput: - x_next         : (1xP) vector containing the next datapoint
%        - I_clust        : (Mx1) Updated importance of Gauss Mixture in gm
%        - region         : (bool) If new point is in region or not
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Compute weight based on distance and importance
ComponentMeans = gm.mu;
dist = pdist2(ComponentMeans,x_current);
weights = 1./(1+dist).*I_clust/sum(I_clust);

% Select max weight and compute the step towards the center of the GM
[~, idx_gm] = max(weights);
diffX = ComponentMeans(idx_gm,:)-x_current;
deltaW = diffX/norm(diffX,2)*robot_step;

% Decrease importance of the chosen cluster
I_clust(idx_gm) = 0.98*I_clust(idx_gm);

% Select maximum variance direction
grad_var = GPR.gradient_var(x_current);
deltaVar = grad_var*robot_step;

% Compute probability associated to datapoint
proba = mvnpdf(x_current,gm.mu(idx_gm,:),gm.Sigma(:,:,idx_gm));

if proba < 1e-5
    % Combining both with normalized result
    I_dist = dist(idx_gm)/(1+dist(idx_gm));         % normalized between[0,1]
    deltaX = I_dist/(I_dist+I_var) * deltaW + I_var/(I_dist+I_var) * deltaVar;

else
    % Combining both with normalized result
    I_dist = 0.1;         % small I dist when in region
    deltaX = I_dist/(I_dist+I_var) * deltaW + I_var/(I_dist+I_var) * deltaVar;
    
end

% Update datapoint
x_next = x_current + deltaX;

end