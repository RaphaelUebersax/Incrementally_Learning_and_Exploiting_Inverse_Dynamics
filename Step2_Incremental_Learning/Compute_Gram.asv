function [K] = GP_train(X,y, Sigma_n, Sigma_rbf)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This function trains a Gaussian Process Regression on the training data
%
% Inputs: - X:        (MxP) Matrix containing M datapoints of dimension P
%         - y:        (Mx1) Vector containing M training targets of dim 1
%         - Sigma_n   (double) Hyperparameters of GP, noise estimate
%         - Sigma_rbf (double) Lengthscale of the RBF kernel
%
% Outputs: - alpha:    (MxM) 
%          
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Compute the Gram Matrix
M=size(X,1);
nms = sum(X'.^2);
K = exp(1/(2*Sigma_rbf)*(-nms'*ones(1,n) -ones(n,1)*nms + 2*(X*X')));

% Invert the Gram Matrix
K_inv = inv(K+Sigma_n^2*eye(M));



end