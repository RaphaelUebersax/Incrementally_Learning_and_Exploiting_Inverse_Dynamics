%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MATLAB SCIPT TO COMPUTE THE GAUSSIAN PROCESS REGRESSION WITH PRIOR
% KNOWLEDE ABOUT THE IDEAL RBD
%
% Last edition: 04.10.2021
% Author: Raphael Uebersax
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all;
close all;
clc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VARIABLES TO SET BEFORE RUNNING THE SCRIPT !!!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Choose if loading small data set or take new data from complete set
small_dataset = true;   % Set to true if using preexisting file
N = 10000;              % number of data rows to load if from complete set

% Choose parameters for the GPR learning method
train_test_ratio = 0.3;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% import iiwa14 robot tree from urdf file
robot = importrobot('../data/iiwa14.urdf');
robot.DataFormat = "row";
robot.Gravity = [0,0,-9.81];

% Name of complete and small data file
small_filename = '../data/smallProcessedActualData.csv';
filename = '../../Complete_data/processedActualData.csv';


%% Load the data from complete data file (only run the 1st time)


if (small_dataset == false)
    % Load the N first rows of the data from csv file (exluding time)
    % pos 1-7 | dpos 1-7 | ddpos 1-7 | torque 1-7
    
    Data = csvread(filename,1,1,[1,1,N,28]); % Variable containing the data
    % write smaller dataset into a csv file
    if exist(small_filename, 'file')==2
      delete(small_filename);             % delete old file if exists
    end
    writematrix(Data,small_filename);
else
    if isfile(small_filename)
         Data = readmatrix(small_filename);
    else
         error('Small dataset not found');
    end
end




%% Assign data to corresponding vector (Pos, Vel, Acc, Torque)

% Assign variables to train and test sets
cv = cvpartition(size(Data,1),'HoldOut',0.3);
idx = cv.test;

% Separate to training and test data
dataTrain = data(~idx,:);
dataTest  = data(idx,:);

train_X =  dataTrain(:,1:21);
train_y = dataTrain(:,22:28);
test_X = dataTest(:,1:21);
test_y = dataTest(:,22:28);

% Training joint parameters for RBD
train_joint_pos = train_X(:,1:7);                % Joint Position   
train_joint_vel = train_X(:,8:14);               % Joint Velocity
train_joint_acc = train_X(:,15:21);              % Joint Acceleration
   
% Testing joint parameters for RBD
test_joint_pos = test_X(:,1:7);                  % Joint Position   
test_joint_vel = test_X(:,8:14);                 % Joint Velocity
test_joint_acc = test_X(:,15:21);                % Joint Acceleration



%% Computation of torque error between ideal-RBD and real-RBD

% initialize vector of correct size
jointTorque_computed = zeros(N,7);

% Check if number of data samples is N
if N~=size(Data,1)
    error("N is not equal to the number of data sample");
end

% compute the ideal inverse dynamics of the robot
for i=1:N
    jointTorque_computed(i,:) = inverseDynamics(robot,JointPos(i,:), JointVel(i,:), zeros(1,7));
end

