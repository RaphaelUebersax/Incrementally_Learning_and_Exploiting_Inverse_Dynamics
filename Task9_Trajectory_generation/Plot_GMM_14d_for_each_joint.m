%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MATLAB SCIPT TO VISUALIZE GMM FIT IN 14D OF THE DATA PROVIDED BY THE TASK
%
% Last edition: 21.12.2021
% Author: Raphael Uebersax
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
close all;
clc;

addpath("../Tools");
addpath("../Regressors");
addpath("./Task9_tools");
rng('default');


%% 0) Variables and constraints

% Select one task
Task = "Polar_DS";      
%Task = "Linear_DS";


%% 1) Import results from data folder

if strcmp(Task,"Linear_DS")
    data_q = load("data/Linear_DS_qs.mat");
    data_q = data_q.data_q;
    data_x = load("data/Linear_DS_xs.mat");
    data_x = data_x.data_x;
        
    % Number of GMM components
    nb_components = 7;
    
elseif strcmp(Task,"Polar_DS")
    data_q = load("data/Polar_DS_qs.mat");
    data_q = data_q.data_q;
    data_x = load("data/Polar_DS_xs.mat");
    data_x = data_x.data_x;
    
    % Number of GMM components
    nb_components = 8;
end

% fit the GMM
RegularizationValue = 0.01;             % Regularization value to ensure postive Covariance
options = statset('MaxIter',10000);     % Increase number of max iterations
gm = fitgmdist(data_q, nb_components,'CovarianceType','full',...
        'RegularizationValue',RegularizationValue,...
        'Options',options);


%% Plot results

mahalDist = mahal(gm,data_q);                                %%%
[~,min_idx] = min(mahalDist,[],2);
min_idx = onehotencode(min_idx',1,"ClassNames",1:nb_components);
min_idx = min_idx';
threshold = 50; 
        
figure
title("GMM")
colors = ["red","green","magenta"];

for idx=1:7
    X = [data_q(:,idx),data_q(:,7+idx)];                %%% VISUALIZATION 
    ax(idx) = subplot(4,2,idx);                         %%%
    scatter(X(:,1),X(:,2),'*');                         %%%
    hold on                                             %%%
    xlabel("q"+string(idx))                             %%%
    ylabel("q"+string(idx)+"dot")                       %%%
    
    jj = zeros(size(mahalDist,1),nb_components);
    for k=1:nb_components
        jj(:,k) = mahalDist(:,k) <= threshold;               %%%

    end
    
    logic_idx = jj & min_idx;
    for k=1:nb_components
        plot(X(logic_idx(:,k),1),X(logic_idx(:,k),2),'.');   %%%
    end

    
end