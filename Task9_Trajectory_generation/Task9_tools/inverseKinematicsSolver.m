function [qdot] = inverseKinematicsSolver(xdot, jacobian, solver)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% THIS FUNCTION SOLVES THE INVERSE KINEMATICS PROBLEM WITH DIFFERENT TYPES
% OF SOLUTIONS THAT CAN BE DECIDED BY THE USER.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Check for default function solver
if nargin == 3
  solver_name = solver.name;
  
elseif nargin == 2
  solver_name = "Damping"; % Set Damping as default solver
  
else
  error("undefined solver parameters")
end


if strcmp(solver_name,"PseudoInv")
    % This method is not recommended due to error with singularities
    qdot = (pinv(jacobian)*xdot)';
    
elseif strcmp(solver_name,"Transposed")
    % This method is not working
    qdot = (jacobian'*xdot)';
    
elseif strcmp(solver_name,"Damping")
    lambda = 5e-2;
    qdot = (jacobian'*((jacobian*jacobian'+lambda^2*eye(size(jacobian,1)))\xdot))';
    
elseif strcmp(solver_name, "Optimization")
    gamma = 1e-4;
    opt_qdot = sdpvar(1,size(solver.gik.RigidBodyTree.homeConfiguration,2));
    opt_settings = sdpsettings('solver', 'gurobi', 'verbose', 0);
    objective = sum((xdot-jacobian*opt_qdot').^2) + gamma*norm(opt_qdot,2);
    optimize([],objective, opt_settings);
    qdot = value(opt_qdot);
    
else
    error("Undefined solver name");
end


end