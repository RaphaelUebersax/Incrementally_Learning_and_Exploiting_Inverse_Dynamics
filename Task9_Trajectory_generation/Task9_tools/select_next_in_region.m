function [Q_next,params] = select_next_in_region(gm, Q_prev, regressors, feasibility, params)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% THIS FUNCTION RETURNS THE NEXT DATAPOINT TO GO IN EACH REGION USING THE
% THE POINT WITH THE MAXIMUM VARIANCE SELECTED RANDOMLY IN A REGION.
%
% Input: - gm             : (cell(7,1)) GMM model fit on task constraints
%        - Q_prev         : (cell(7,1)) Previous goal datapoints of dimension P
%        - regressors     : (cell(7,1)) Gaussian Process Regressor
%        - feasibility    : (struct) Feasibility constraints of robot
%        - params         : (struct) Parameters
%
%
% Ouput: - Q_next         : (cell(7,1)) Goal datapoints of dimension P
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Initialization of Q_next
Q_next = cell(7,1);

% Function that computes the Mahalanobis distance
MahaDist = @(x,GMM) sqrt(diag((x-GMM.mu(1,:))*(GMM.Sigma(:,:,1)\(x-GMM.mu(1,:))')));

for idx=1:7
    
    % Sizes and init
    Q = Q_prev{idx};
    nb_gaussians = size(Q,1);
    Q_next{idx} = zeros(nb_gaussians,size(Q,2));


    % Select randomly a few point in each region and chose max variance
    for i=1:nb_gaussians
    
        % Compute points from the region
        [Y_i,~] = random(gm{idx,i}, nb_gaussians*3*params.P);

        % Find P points that are "in" the region
        Y_dist = MahaDist(Y_i,gm{idx,i});
        Y_i = Y_i(Y_dist <= params.region_thres,:); 
        Y_i = Y_i(1:params.P,:);         % P datapoints inside region i

        % Compute variance of all the points
        [~, Var_i] = GPR.predict(Y_i, false);
        [~, idx] = sort(Var_i,'descend');

        % Assign next point
        position = 1;
        X_next(i,:) = Y_i(idx(position),:);

%         % Make sure point is feasible
%         while not(is_feasible_point(X_next(i,:),feasibility))
%             position = position + 1;
%             X_next(i,:) = Y_i(idx(position),:); 
%         end
    end
end
    


end