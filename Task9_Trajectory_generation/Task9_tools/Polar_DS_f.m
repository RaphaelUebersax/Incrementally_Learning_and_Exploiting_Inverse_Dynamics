function [xdot] = Polar_DS_f(x, M, R, rho_0, x_center)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION COMPUTING THE POLAR DYNAMICAL SYSTEM, THUS RETURNING THE
% VELOCITY ASSOCIATED TO THE INPUT.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Radius
rho = sqrt((x(1)-x_center(1))^2+(x(2)-x_center(2))^2);

% Jacobian of Polar to cartesian
cosT = (x(1)-x_center(1))/rho;
sinT = (x(2)-x_center(2))/rho;
J = [cosT, -sinT/rho; sinT, cosT/rho];

% Derivative in Polar
rho_dot = -sqrt(M)*(rho-rho_0);
theta_dot = R*exp(-M^2*(rho-rho_0)^2);

% Derivative in Cartesian
xdot = J*[rho_dot;theta_dot];
xdot = [xdot',0];


end