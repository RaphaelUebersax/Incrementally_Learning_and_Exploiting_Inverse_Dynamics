%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MATLAB SCIPT TO COMPUTE THE SECOND METHOD OF EXPLORATION IN A CONSTRAINED
% ENVIRONMENT USING NONPARAMETRIC INCREMENTAL GAUSSIAN PROCESS.
%
% Last edition: 29.11.2021
% Author: Raphael Uebersax
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
close all;
clc;

addpath("../Tools");
addpath("../Regressors");
addpath("./Step7_tools");
addpath("./Intra_cluster_methods");
rng('default');

% Number of Gaussians for GMM
nb_gaussians = 3;

% Complete traj method:
% Set to 1 for angle criteria and 2 for distance criteria
complete_traj_method = 2;

% Compute metrics
do_prediction_accuracy = false;
do_variance_computation = false;


% Info variables to plot
plot_constraint = true;
plot_trajectory = true;
plot_x_n = true;
plot_error = true;
plot_RBD = false;
plot_limit_cycles = false;



%% 1) Create 2d constrained environment (q,qdot)

% Sample datapoints as constrained environement


sc = 0.1;
% Constraint 1
m1 = sc*[-10;25];	  %Mean
sigma1 = sc^2*10*eye(2);	  %Variance
d1 = 100;             %Length
z1 = mvnrnd(m1,sigma1,d1);


% Constraint 2
m2 = sc*[25;15];     %Mean
sigma2 = sc^2*diag([30;30]);	  %Variance
d2 = 250;             %Length
z2 = mvnrnd(m2,sigma2,d2);

% Constraint 3
m3 = sc*[-25;-5];	%Mean
sigma3 = sc^2*diag([6;30]);	    %Variance
d3 = 300;               %Length
z3 = mvnrnd(m3,sigma3,d3);

% sc = 0.1;
% % Constraint 1
% m1 = sc*[-30;-5];	              %Mean
% sigma1 = sc^2*[5,10;10,30];	  %Variance
% d1 = 200;                         %Length
% z1 = mvnrnd(m1,sigma1,d1);
% 
% 
% % Constraint 2
% m2 = sc*[40;10];                  %Mean
% sigma2 = sc^2*[10,-10;-10,30];	  %Variance
% d2 = 250;                         %Length
% z2 = mvnrnd(m2,sigma2,d2);
% 
% % Constraint 3
% m3 = sc*[-2;-10];	            %Mean
% sigma3 = sc^2*diag([3;10]);	    %Variance
% d3 = 300;                       %Length
% z3 = mvnrnd(m3,sigma3,d3);



% Plot the artificially created regions
if plot_constraint
    figure 
    scatter(z1(:,1),z1(:,2))
    hold on
    scatter(z2(:,1),z2(:,2))
    scatter(z3(:,1),z3(:,2))
    xlabel("q")
    ylabel("qdot")
    title("Task Constraints")
    
end
 

% Use two sines as prior and ground truth of the torque   
RBD = @(A) 1.2*sin(sum(A,2)/50*pi);
y = @(A) 2.3*sin(sum(A,2)/50*pi);


%% 2) Model the constrained region with GMM and rotation order

% Group task regions into one dataset
X = [z1;z2;z3];

% Fit gmm with nb_gaussians components on the task regions
gm = fitgmdist(X,nb_gaussians);

% Determine rotation order of the regions
angle_from_center = atan2(gm.mu(:,2),gm.mu(:,1));
for i=1:nb_gaussians
    if angle_from_center(i) < 0
        angle_from_center(i) = angle_from_center(i) + 2*pi;
    end
end
[~,rotation_order_idx] = sort(angle_from_center,'descend');

% determine principal axis
e1 = zeros(size(gm.mu,1),size(gm.mu,2));
for i=1:nb_gaussians
    [eigvector,eigvl]=eig(gm.Sigma(:,:,i));
    eigvalue = diag(eigvl);
    [~,id] = sort(eigvalue,'descend');
    sorted_eig = eigvector(:,id);
    e1(i,:) = sorted_eig(:,1);
end



%% 3) Setup feasibility constraints

% Physical limits of the joint
feasibility = {};
feasibility.q_upper_bound = 6;
feasibility.q_lower_bound = -6;
feasibility.qdot_upper_bound = 6;
feasibility.qdot_lower_bound = -6;
feasibility.margin = 0.1;
feasibility.e1 = e1;



%% 3) Define parameters and init Incremental GPR 

% Structure containing parameters of optimization
param = {};
params.I_var = 2;               % Importance of the variance
params.traj_iter = 2;           % Index of the trajectory
params.region_thres = 2.5;      % Nb of "sigma" that is considered to be in region
params.robot_step = 0.05;        % Size of the step for computing the next point
params.convergence_dist = 0.1;  % Distance to be close enough to goal
params.delta_T = 0.01;          % update frequency of robot (min: 0.005)
params.alpha = 0.8;             % convergence rate for rho
params.beta = 0.5;              % Convergence rate for theta
params.sparseness = 10;         % Add point of trajectory all n iterations
params.P = 20;                  % Number of random points for select method number 2  
params.M = 3;                   % Number of step from random points for select method number 3&4
params.N = 20;                  % Number of random directions for select method 3

% Initialize GP with hyperparameters
budget = 600;                  
Sigma_n = 0.1;
Sigma_rbf = 0.4;
Sigma_f = 1;
myGPR = CholBudgetGPRegressor(budget, Sigma_rbf, Sigma_n, Sigma_f);



%% 4) Initialization of the joint position and goals in each region

% Number of steps
steps = 25;

% Define staring postion of the "robot"
x_start = [4,0];

% Initialize trajectory vector for plotting purpose
trajectory = zeros(1,2);
trajectory(1,:) = x_start;

% Initialize the goal of each region to be the center of the region
X_next = gm.mu;     % (nb_gaussians x N)

%qc_center = mean(gm.mu(:,1));
qc_center = 0;
feasibility.qc_center = qc_center;



%% 5) First iteration

% First point
x_current = x_start;

% Compute limit cylce passing through each "next" point in region
[opt_rho, opt_qc] = compute_limit_cycles(X_next, feasibility);



if plot_limit_cycles
    figure
    scatter(z1(:,1),z1(:,2),'b')
    hold on
    scatter(z2(:,1),z2(:,2),'b')
    scatter(z3(:,1),z3(:,2),'b')
    th = 0:pi/50:2*pi;
    for i = 1:3
        xunit = opt_rho(i) * cos(th) + opt_qc(i);
        yunit = opt_rho(i) * sin(th);
        h = plot(xunit, yunit,'m');
    end
end



% Compute first trajectory of the limit cycle
if complete_traj_method == 1
    [points_to_add, x_current, trajectory, params] = complete_trajectory_angle_criterium(opt_rho, ...
        opt_qc, x_current, X_next, gm, params, trajectory, rotation_order_idx);
else 
    [points_to_add, x_current, trajectory, params] = complete_trajectory_distance_criterium(opt_rho, ...
        opt_qc, x_current, X_next, gm, params, trajectory, rotation_order_idx);
end

% Add point to model and compute updated GP incrementally
for j=1:size(points_to_add,1)
    myGPR = myGPR.update(points_to_add(j,:), y(points_to_add(j,:)), RBD(points_to_add(j,:)));
end
myGPR = myGPR.fit();



% Compute prediction error in task domain
if do_prediction_accuracy
    prediction_error = zeros(steps,1);
    [ypred, ~] = myGPR.predict(X, RBD(X));
    prediction_error(1) = norm(ypred-y(X),2);
end

% Compute the overall variance evolution in the regions
if do_variance_computation
    variance_region = zeros(steps,1);
    [~,yVar] = myGPR.predict(X,false);
    variance_region(1) = sum(abs(yVar));
end



%% 6) Loop over main that balances exploration and exploitation

x_n_visualize = zeros(3*steps,2);

% Train incrementally by balancing exploration and task constraints
for i=1:steps
    
    % Select next point to go to 
    [X_next,params] = select_next_in_region2(gm, X_next, myGPR, feasibility, params);
    for j=1:3
        x_n_visualize(3*(i-1)+j,:) = X_next(j,:);
    end
    
    % Create limit cycles to go to the point
    [opt_rho, opt_qc] = compute_limit_cycles(X_next, feasibility);
    
        
    % move along limit cycles until reaching destination (2pi rotation)
    if complete_traj_method == 1
        [points_to_add, x_current, trajectory, params] = complete_trajectory_angle_criterium(opt_rho, ...
            opt_qc, x_current, X_next, gm, params, trajectory, rotation_order_idx);        
    else
        [points_to_add, x_current, trajectory, params] = complete_trajectory_distance_criterium(opt_rho, ...
            opt_qc, x_current, X_next, gm, params, trajectory, rotation_order_idx);
    end
    
    
    % Increment importance of exploration
    params.I_var = 0.25+3*i/(4*steps);
     

    % Add point to model and compute updated GP incrementally
    for j=1:size(points_to_add,1)
        myGPR = myGPR.update(points_to_add(j,:), y(points_to_add(j,:)), RBD(points_to_add(j,:)));
    end
    myGPR = myGPR.fit();

    % Compute error in task domain
    if do_prediction_accuracy
        [ypred, ~] = myGPR.predict(X, RBD(X));
        prediction_error(i) = norm(ypred-y(X),2);
    end
    
    % Compute the overall variance evolution in the regions
    if do_variance_computation
        [~,yVar] = myGPR.predict(X, false);
        variance_region(i) = sum(abs(yVar));
    end
    

    % Display during computation
    if mod(i,1)==0
        disp("Iteration: " + string(i) + "/" + string(steps));
    end
end



%% 7) Plot results


if plot_trajectory
    sz = 2;
    if not(plot_limit_cycles)
        figure 
    end
    scatter(z1(:,1),z1(:,2),'b')
    hold on
    scatter(z2(:,1),z2(:,2),'b')
    scatter(z3(:,1),z3(:,2),'b')
    plot(trajectory(:,1),trajectory(:,2),'k');
    plot([feasibility.q_lower_bound,feasibility.q_upper_bound],...
        [feasibility.qdot_upper_bound,feasibility.qdot_upper_bound],'r','LineWidth',sz);
    plot([feasibility.q_lower_bound,feasibility.q_upper_bound],...
        [feasibility.qdot_lower_bound,feasibility.qdot_lower_bound],'r','LineWidth',sz);
    plot([feasibility.q_lower_bound,feasibility.q_lower_bound],...
        [feasibility.qdot_lower_bound,feasibility.qdot_upper_bound],'r','LineWidth',sz);
    plot([feasibility.q_upper_bound,feasibility.q_upper_bound],...
        [feasibility.qdot_lower_bound,feasibility.qdot_upper_bound],'r','LineWidth',sz);
    xlabel("$q$",'fontsize',18,'interpreter','latex')
    ylabel("$\dot{q}$",'fontsize',18,'interpreter','latex')
    xlim([feasibility.q_lower_bound-1,feasibility.q_upper_bound+1])
    ylim([feasibility.qdot_lower_bound-1,feasibility.qdot_upper_bound+1])
        
end



if plot_x_n
   figure 
    scatter(z1(:,1),z1(:,2),'b')
    hold on
    scatter(z2(:,1),z2(:,2),'b')
    scatter(z3(:,1),z3(:,2),'b')
    scatter(x_n_visualize(:,1),x_n_visualize(:,2),'r')
    xlabel("$q_1$",'fontsize',18,'interpreter','latex')
    ylabel("$\dot{q}_1$",'fontsize',18,'interpreter','latex')
    xlim([feasibility.q_lower_bound-1,feasibility.q_upper_bound+1])
    ylim([feasibility.qdot_lower_bound-1,feasibility.qdot_upper_bound+1])
end


if do_prediction_accuracy
    if plot_error
        figure 
        plot(1:length(prediction_error),prediction_error,'k');
        hold on
        %plot(linspace(1,length(prediction_error),2),ones(2,1)*prediction_error1,'r')
        xlabel("Number of steps")
        ylabel("Error in Torque")
        title("Error of constrained model")
    end

    if plot_RBD
        y_truth =y(X);
        rbd = RBD(X);
        nb = 100;

        figure
        plot(1:nb,ypred(1:nb),'k-o')
        hold on
        plot(1:nb,y_truth(1:nb),'b')
        plot(1:nb, rbd(1:nb),'g')
        legend("predicted2","truth", "RBD")
    end
end



if do_variance_computation
    if plot_error
        figure 
        plot(1:length(variance_region),variance_region,'k');
        hold on
        xlabel("Number of steps")
        ylabel("Variance in regions")
        title("Variance of constrained model")
    end
end