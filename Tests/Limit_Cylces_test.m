clear all;
close all;
clc;

addpath("../Tools");
addpath("../Step6_Task_Constraints");
rng('default');

plot_trajectory = true;

% Physical limits of the joint
feasibility = {};
feasibility.q_upper_bound = 5;
feasibility.q_lower_bound = -5;
feasibility.qdot_upper_bound = 5;
feasibility.qdot_lower_bound = -5;

% Structure containing parameters of optimization
param = {};
params.traj_iter = 2;            % Index of the trajectory
params.convergence_dist = 0.025;  % Distance to be close enough to goal
params.delta_T = 0.01;           % update frequency of robot (min: 0.005)
params.alpha = 0.1;              % convergence rate for rho
params.beta = 0.1;               % Convergence rate for theta

%Trajectory to follow
X = [-1,1;-2,0.5;1,1;1.5,1.1;1,3];

% Define staring postion of the "robot"
x_start = X(1,:);
x_current = x_start;

% Initialize trajectory vector for plotting purpose
trajectory = zeros(1,2);
trajectory(1,:) = x_start;

for i=1:4
    
    x_next = X(i+1,:);
    
    % Create limit cycle to go to the point
    [opt_rho, opt_qc] = limit_cycle(x_current, x_next, feasibility);
        
    % move along limit cycle until reaching destination
    [points_to_add, x_current, trajectory, params] = move_along_limit_cycle(opt_rho, ...
                    opt_qc, x_current, x_next, 0, params, trajectory, true);

end

if plot_trajectory
    
    figure 
    scatter(X(:,1),X(:,2),'r')
    hold on
    plot(trajectory(:,1),trajectory(:,2),'b');
    xlabel("q1")
    ylabel("q1dot")
    title("Task Constraints - Positions/Velocities")
        
end