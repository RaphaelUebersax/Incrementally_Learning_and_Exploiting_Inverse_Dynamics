function [idx] = neighbours_7d(Candidate_pool,x_current, max_dist, GPR)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% THIS FUNCTION RETURNS INDEX OF THE CANDIDAT POOL FOR THE POINTS THAT ARE
% CONSIDERED IN THE NEIGHBOORHOOD OF THE CURRENT DATAPOINT.
%
% Input: - Candidate_pool : (MxP+2) M datapoints of [P-dimensions, target, RBD]
%        - x_current      : (1xP) Last considered datapoint of dimension P
%        - max_dist       : (double) maximum distance in neighboorhood
%        - GPR            : (struct) Structure containing all GP Regressor
%
%
% Ouput: - idx            : (int) Index of next datapoint in Candidate Pool
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

distances = pdist2(Candidate_pool(:,1:14), x_current, 'euclidean');
idx_neighbours = find(distances <= max_dist);
while isempty(idx_neighbours)
    max_dist = 2*max_dist;
    idx_neighbours = find(distances <= max_dist);
end


fn = fieldnames(GPR);
Var_neighbours = zeros(length(idx_neighbours),1);
for j=1:numel(fn)
     [~, var] = GPR.(fn{j}).predict(Candidate_pool(idx_neighbours,1:14),...
                  Candidate_pool(idx_neighbours,15+j));
     Var_neighbours = Var_neighbours + var;
    
end

[~, max_var_pos] = max(Var_neighbours);
idx = idx_neighbours(max_var_pos);

end