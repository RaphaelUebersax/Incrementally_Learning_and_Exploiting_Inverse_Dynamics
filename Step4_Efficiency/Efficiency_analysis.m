%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MATLAB SCIPT TO COMPUTE THE UPDATE TIME FOR THE INCREMENTAL GPR WITH
% CHOLESKY DECOMPOSITON.
%
% Last edition: 31.12.2021
% Author: Raphael Uebersax
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all;
close all;
clc;

addpath("../Tools");
addpath("../Regressors");
rng('default');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VARIABLES TO SET BEFORE RUNNING THE SCRIPT !!!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Choose if loading small data set or take new data from complete set
small_dataset = false;   % Set to true if using preexisting file
N = 1000;                 % number of data rows to load if from complete set
n_steps = 20;            % Set intervall between two successive datapoints
budg = 600;              % Set budget for cholesky and shermann appraoch
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




% import iiwa14 robot tree from urdf file
robot = importrobot('../data/iiwa14.urdf');
robot.DataFormat = "row";
robot.Gravity = [0,0,-9.81];

% Name of complete and small data file
small_filename = '../data/gprProcessedActualData.csv';
filename = '../../Complete_data/processedActualData.csv';


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load the data from complete data file (only run the 1st time)

% Load the N first rows of the data from csv file (exluding time)
% pos 1-7 | dpos 1-7 | ddpos 1-7 | torque 1-7

if (small_dataset == false)
    data = csvread(filename,1,1,[1,1,N*n_steps,28]); % Variable containing the data
    data = data([1:n_steps:end],:);   
    if exist(small_filename, 'file')==2
      delete(small_filename);             % delete old file if exists
    end
    writematrix(data,small_filename);
    
else
    if isfile(small_filename)
         data = readmatrix(small_filename);
    else
         error('Small dataset not found');
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load data in variables

idx = randperm(size(data,1));
X =  data(idx,1:14);
y = data(idx,22:28);

% Training joint parameters for RBD
train_joint_pos = X(:,1:7);                % Joint Position   
train_joint_vel = X(:,8:14);               % Joint Velocity
train_joint_acc = zeros(size(X,1),7);      % Joint Acceleration



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Computation of nominal RBD from robot model 

% initialize vector of correct size
train_RBD = zeros(size(X,1),7);

% nominal inverse dynamics of the robot for using it as the mean for train
for i=1:size(X,1)
    train_RBD(i,:) = inverseDynamics(robot,train_joint_pos(i,:), ...
        train_joint_pos(i,:), train_joint_acc(i,:));
end

% Inverse the torque value from measured to exercing
train_RBD = -1*train_RBD;



% Candidate pool as next possible point to add
Candidate_pool = [X,y,train_RBD];

% Shuffle training data
ir=randperm(size(Candidate_pool,1));
Candidate_pool=Candidate_pool(ir,:);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR using Cholseky decomposition

% definition of global hyperparameters (all regressors have the same) 
budget = budg;                  
Sigma_n = 0.1;
Sigma_rbf = 0.4;
Sigma_f = 1;

disp("Start of Cholseky")

% Regressor for the seven joints
myGPR1 = init_7d_chol_regressors(budget, Sigma_rbf, Sigma_n, Sigma_f);

fn = fieldnames(myGPR1);
time_update_GPR1 = zeros(size(Candidate_pool,1),1);

% Train incrementally
for i=1:size(Candidate_pool,1)
    tic                               % start timer of loop i
    for j=1:numel(fn)
        myGPR1.(fn{j}) = myGPR1.(fn{j}).update(Candidate_pool(i,1:14),...
            Candidate_pool(i,14+j), Candidate_pool(i,21+j));
    end
    time_update_GPR1(i) = toc;        % end timer of loop i
    if mod(i,50)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end
disp("End of Cholesky")


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR using Sherman-Morisson formula

% definition of global hyperparameters (all regressors have the same) 
budget = budg;                  
Sigma_n = 0.1;
Sigma_rbf = 0.4;
Sigma_f = 1;

disp("Start of Sherman")

% Regressor for the seven joints
myGPR2 = init_7d_Sherman_regressors(budget, Sigma_rbf, Sigma_n, Sigma_f);

fn = fieldnames(myGPR2);
time_update_GPR2 = zeros(size(Candidate_pool,1),1);

% Train incrementally
for i=1:size(Candidate_pool,1)
    tic                               % start timer of loop i
    for j=1:numel(fn)
        myGPR2.(fn{j}) = myGPR2.(fn{j}).update(Candidate_pool(i,1:14),...
            Candidate_pool(i,14+j), Candidate_pool(i,21+j));
    end
    time_update_GPR2(i) = toc;        % end timer of loop i
    if mod(i,50)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end
disp("End of Sherman")





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR with Random Feature with D = 

% definition of global hyperparameters (all regressors have the same) 
D = 50;                                 
Sigma_n = 0.1;
Sigma_rbf = 0.4;
Sigma_f = 1;
dim = size(X,2);
disp("Start of RF, D = 50")

% Regressor for the seven joints
myGPR3 = init_7d_RF_regressors(D,dim, Sigma_rbf, Sigma_n, Sigma_f);
fn = fieldnames(myGPR3);
time_update_GPR3 = zeros(size(Candidate_pool,1),1);

% Train incrementally
for i=1:size(Candidate_pool,1)

    tic                               % start timer of loop i
    for j=1:numel(fn)
        myGPR3.(fn{j}) = myGPR3.(fn{j}).increment(Candidate_pool(i,1:14),...
            Candidate_pool(i,14+j), Candidate_pool(i,21+j));
    end
    time_update_GPR3(i) = toc;        % end timer of loop i

    if mod(i,50)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end
disp("End of RF, D = 50")

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR with Random Feature with D = 

% definition of global hyperparameters (all regressors have the same) 
D = 200;                                 
Sigma_n = 0.1;
Sigma_rbf = 0.4;
Sigma_f = 1;
dim = size(X,2);
disp("Start of RF, D = 200")

% Regressor for the seven joints
myGPR4 = init_7d_RF_regressors(D,dim, Sigma_rbf, Sigma_n, Sigma_f);
fn = fieldnames(myGPR4);
time_update_GPR4 = zeros(size(Candidate_pool,1),1);

% Train incrementally
for i=1:size(Candidate_pool,1)

    tic                               % start timer of loop i
    for j=1:numel(fn)
        myGPR4.(fn{j}) = myGPR4.(fn{j}).increment(Candidate_pool(i,1:14),...
            Candidate_pool(i,14+j), Candidate_pool(i,21+j));
    end
    time_update_GPR4(i) = toc;        % end timer of loop i

    if mod(i,50)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end
disp("End of RF, D = 200")


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR with Random Feature with D = 

% definition of global hyperparameters (all regressors have the same) 
D = 500;                                 
Sigma_n = 0.1;
Sigma_rbf = 0.4;
Sigma_f = 1;
dim = size(X,2);
disp("Start of RF, D = 500")

% Regressor for the seven joints
myGPR5 = init_7d_RF_regressors(D,dim, Sigma_rbf, Sigma_n, Sigma_f);
fn = fieldnames(myGPR5);
time_update_GPR5 = zeros(size(Candidate_pool,1),1);

% Train incrementally
for i=1:size(Candidate_pool,1)

    tic                               % start timer of loop i
    for j=1:numel(fn)
        myGPR5.(fn{j}) = myGPR5.(fn{j}).increment(Candidate_pool(i,1:14),...
            Candidate_pool(i,14+j), Candidate_pool(i,21+j));
    end
    time_update_GPR5(i) = toc;        % end timer of loop i

    if mod(i,50)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end
disp("End of RF, D = 500")



%% Plot update time
start_idx = 2;
x_idx = start_idx:size(Candidate_pool,1);
time_update_GPR2_plot = time_update_GPR2;
time_update_GPR2_plot(600:end) = medfilt1(time_update_GPR2(600:end),7,'truncate');
time_update_GPR1_plot = time_update_GPR1;
time_update_GPR1_plot(600:end) = medfilt1(time_update_GPR1(600:end),10,'truncate');


figure
plot(x_idx, time_update_GPR1_plot(start_idx:end),'b')
hold on, grid on
plot(x_idx, time_update_GPR2_plot(start_idx:end),'g')
plot(x_idx, time_update_GPR3(start_idx:end),'r')
plot(x_idx, time_update_GPR4(start_idx:end),'k')
plot(x_idx, time_update_GPR5(start_idx:end),'m')
%plot(x_idx, 0.05*ones(length(x_idx),1),'r');
xlabel("Number of Training Data",'FontSize',16)
ylabel("Update time [s]", 'FontSize',16)
ylim([0,0.3])
legend("Cholesky decomposition", "Block inversion","Random Features, D=50","Random Features, D=200", "Random Features, D=500", 'Location', "northwest",'FontSize',13 )
%title("Update time of different incremental approaches")

