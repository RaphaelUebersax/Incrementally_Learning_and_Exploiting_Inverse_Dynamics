%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MATLAB SCIPT TO COMPUTE THE GAUSSIAN PROCESS REGRESSION WITH PRIOR
% KNOWLEDE ABOUT THE NOMINAL RBD FOR JOINT NUMBER 2 USING AN INCREMENTAL
% TECHNIQUE BASED ON RANDOM FEATURE MAPS AS WELL AS THE VARIANCE TO
% DECIDE WHICH POINT SHOULD BE ADDED AS THE NEXT ONE.
%
% Last edition: 25.10.2021
% Author: Raphael Uebersax
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all;
close all;
clc;

addpath("../Tools");
addpath("../Regressors");
rng('default');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VARIABLES TO SET BEFORE RUNNING THE SCRIPT !!!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Choose if loading small data set or take new data from complete set
small_dataset = false;   % Set to true if using preexisting file
N = 1000;                 % number of data rows to load if from complete set
n_steps = 20;            % Set intervall between two successive datapoints

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




% import iiwa14 robot tree from urdf file
robot = importrobot('../data/iiwa14.urdf');
robot.DataFormat = "row";
robot.Gravity = [0,0,-9.81];

% Name of complete and small data file
small_filename = '../data/gprProcessedActualData.csv';
filename = '../../Complete_data/processedActualData.csv';


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load the data from complete data file (only run the 1st time)

% Load the N first rows of the data from csv file (exluding time)
% pos 1-7 | dpos 1-7 | ddpos 1-7 | torque 1-7

if (small_dataset == false)
    data = csvread(filename,1,1,[1,1,N*n_steps,28]); % Variable containing the data
    data = data([1:n_steps:end],:);   
    if exist(small_filename, 'file')==2
      delete(small_filename);             % delete old file if exists
    end
    writematrix(data,small_filename);
    
else
    if isfile(small_filename)
         data = readmatrix(small_filename);
    else
         error('Small dataset not found');
    end
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Split the data into train and test set

idx = randperm(size(data,1));
X =  data(idx,1:14);
y = data(idx,23);

% Training joint parameters for RBD
train_joint_pos = X(:,1:7);                % Joint Position   
train_joint_vel = X(:,8:14);               % Joint Velocity
train_joint_acc = zeros(size(X,1),7);      % Joint Acceleration



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Computation of nominal RBD from robot model 

% initialize vector of correct size
train_RBD = zeros(size(X,1),7);

% nominal inverse dynamics of the robot for using it as the mean for train
for i=1:size(X,1)
    train_RBD(i,:) = inverseDynamics(robot,train_joint_pos(i,:), ...
        train_joint_pos(i,:), train_joint_acc(i,:));
end

% Inverse the torque value from measured to exercing
train_RBD = -1*train_RBD;

% Load values for joint 2 only
train_RBD_joint2 = train_RBD(:,2);


% Candidate pool as next possible point to add
Candidate_pool = [X,y,train_RBD_joint2];

% Shuffle training data
ir=randperm(size(Candidate_pool,1));
Candidate_pool=Candidate_pool(ir,:);


% prediction error vector
prediction_error1 = zeros(size(Candidate_pool,1),1);
prediction_error2 = zeros(size(Candidate_pool,1),1);
prediction_error3 = zeros(size(Candidate_pool,1),1);




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR regressor definition

% definition of global hyperparameters (all regressors have the same) 
budget = 50;        % For RF, budget is dimension of feature map                                 
Sigma_n = 0.3;
Sigma_rbf = 1.2;
Sigma_f = 1;
dim = size(X,2);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR with random points added

disp("Start of random point")

% regressor
RF1 = RF_GPRegressor(budget, dim, Sigma_rbf, Sigma_n, Sigma_f);

% Train incrementally
for i=1:size(Candidate_pool,1)
    RF1 = RF1.increment(Candidate_pool(i,1:14), Candidate_pool(i,15), Candidate_pool(i,16));
    [ypred, ~] = RF1.predict(Candidate_pool(:,1:14), Candidate_pool(:,16));
    prediction_error1(i) = norm(ypred-Candidate_pool(:,15),2);
    
    if mod(i,100)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end
disp("End of random point")


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR adding points with max variance

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Specific Hyperparameter
max_dist = 3*Sigma_rbf;          % Maximum distance to consider in neigboorhood


disp("Start of max variance")
RF2 = RF_GPRegressor(budget, dim, Sigma_rbf, Sigma_n, Sigma_f);

% use other variable to decrement candidate pool
Candidate_pool2 = Candidate_pool;

% Iteration 1: First point
x_current = Candidate_pool(1,1:14);     % Use first point as current
RF2 = RF2.increment(x_current, Candidate_pool(1,15), Candidate_pool(1,16));
Candidate_pool2(1,:) = [];               % Remove first point from candidate pool

% Compute error on first point
prediction_error2(1) = compute_error(Candidate_pool, RF2);


% Train rest of the points
for i=2:size(Candidate_pool,1)
    
    % find next datapoint to train on
    index_next = neighbours(Candidate_pool2, x_current, max_dist, RF2);
    
    % Define x_current and update candidate pool
    x_current = Candidate_pool2(index_next,1:14);
    RF2 = RF2.increment(x_current, Candidate_pool2(index_next,15), Candidate_pool2(index_next,16));
    Candidate_pool2(index_next,:) = [];
    
    % Predict error
    prediction_error2(i) = compute_error(Candidate_pool,RF2);
    
    if mod(i,100)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end
disp("End of max variance")






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Incremental GPR adding points with marchy variance

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Specific Hyperparameter
step = 10000;          % Lenght of gradient vector 


disp("Start of marchy variance")

RF3 = RF_GPRegressor(budget, dim, Sigma_rbf, Sigma_n, Sigma_f);

% use other variable to decrement candidate pool
Candidate_pool3 = Candidate_pool;

% Iteration 1: First point
x_current = Candidate_pool(1,1:14);      % Use first point as current
RF3 = RF3.increment(x_current, Candidate_pool(1,15), Candidate_pool(1,16));
Candidate_pool3(1,:) = [];               % Remove first point from candidate pool

% Compute error on first point
prediction_error3(1) = compute_error(Candidate_pool, RF3);

% Train rest of the points
for i=2:size(Candidate_pool,1)
    % find next datapoint to train on
    index_next = gradient_prop(Candidate_pool3, x_current, step, RF3);
    
    % Define x_current and update candidate pool
    x_current = Candidate_pool3(index_next,1:14);
    RF3 = RF3.increment(x_current, Candidate_pool3(index_next,15), Candidate_pool3(index_next,16));
    Candidate_pool3(index_next,:) = [];
    
    % Predict error
    prediction_error3(i) = compute_error(Candidate_pool, RF3);
    
    if mod(i,100)==0
        disp("Iteration: " + string(i) + "/" + string(N));
    end
end

disp("End of max variance")




%% Plot error
start_idx = 15;
x_idx = start_idx:size(Candidate_pool,1);

figure
plot(x_idx, prediction_error1(start_idx:end),'k')
hold on
plot(x_idx, prediction_error2(start_idx:end),'b')
plot(x_idx, prediction_error3(start_idx:end),'g')
xlabel("Number of Training Data")
ylabel("Predicition Error [Nm]")
legend("Random", "Max Var", "Marchy Var")

