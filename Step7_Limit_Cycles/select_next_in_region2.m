function [X_next,params] = select_next_in_region2(gm, X_prev, GPR, feasibility, params)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% THIS FUNCTION RETURNS THE NEXT DATAPOINT TO GO IN EACH REGION USING THE
% THE POINT WITH THE MAXIMUM VARIANCE SELECTED RANDOMLY IN A REGION.
%
% Input: - gm             : (object) GMM model fit on task constraints
%        - X_prev         : (nb_gaussians x P) Previous goal datapoints of dimension P
%        - GPR            : (object) Gaussian Process Regressor
%        - feasibility    : (struct) Feasibility constraints of robot
%        - params         : (struct) Parameters
%
%
% Ouput: - X_next         : (nb_gaussians x P) Goal datapoints of dimension P
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nb_gaussians = size(X_prev,1);
X_next = zeros(nb_gaussians,size(X_prev,2));

% Function that computes the Mahalanobis distance
MahaDist = @(x,idx) sqrt(diag((x-gm.mu(idx,:))*(gm.Sigma(:,:,idx)\(x-gm.mu(idx,:))')));

% Generate nb_gaussians*15 points from the GMM
[Y,compIdx] = random(gm, nb_gaussians*3*params.P);


% Select randomly a few point in each region and chose max variance
for i=1:nb_gaussians
    
    % Compute points from the region
    Y_i = Y(compIdx == i,:);
    
    % Find P points that are "in" the region
    Y_dist = MahaDist(Y_i,i);
    Y_i = Y_i(Y_dist <= params.region_thres,:); 
    Y_i = Y_i(1:params.P,:);         % P datapoints inside region i
    
    % Compute variance of all the points
    [~, Var_i] = GPR.predict(Y_i, false);
    [~, idx] = sort(Var_i,'descend');
    
    % Assign next point
    position = 1;
    X_next(i,:) = Y_i(idx(position),:);
    
    % Make sure point is feasible
    while not(is_feasible_point(X_next(i,:),feasibility))
        position = position + 1;
        X_next(i,:) = Y_i(idx(position),:); 
    end
end
    


end