%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% MATLAB SCIPT LOADING THE RIGID BODY DYNAMICS OF THE IIWA KUKA 14 ROBOT
% AND COMPARING THE MODEL TO SOME REAL DATA COLLECTED WITH THE ROBOT.
%
% Last edition: 04.10.2021
% Author: Raphael Uebersax
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all;
close all;
clc;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VARIABLES TO SET BEFORE RUNNING THE SCRIPT !!!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Choose if loading a small dataset or take new data from complete set
% collected by the work at LASA performed by Sthithpragya Gupta and Farshad
% Khadivar
small_dataset = false;   % Set to true if using preexisting file
N = 10000;               % number of data rows to load if from complete set
M = 500;                 % number of data rows to add to test without train
n_steps = 20;            % Set intervall between two successive datapoints

% Robot URDF file path
robot_urdf_path = '../data/iiwa14.urdf';

% Name of complete and small data file
small_filename = '../data/gprProcessedActualData.csv';
filename = '../../Complete_data/processedActualData.csv';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% import iiwa14 robot tree from urdf file
robot = importrobot(robot_urdf_path);
robot.DataFormat = "row";
robot.Gravity = [0,0,-9.81];

% Choose which joint of the RBD error to plot
plot_all = false;       % Set to true to plot all 7 joints
plot_joint_nb = 2;      % Choose number of the joint to plot between [1-7]
nb_values_plot = 1000;  % Choose number of data to plot




%% Load the data from complete data file (only run the 1st time)

% Load the N first rows of the data from csv file (exluding time)
% pos 1-7 | dpos 1-7 | ddpos 1-7 | torque 1-7

if (small_dataset == false)
    Data = csvread(filename,1,1,[1,1,N*n_steps,28]); % Variable containing the data
    Data = Data([1:n_steps:end],:);

    delimitation = size(Data,1);           % information on seperation between data and data_away
    delimitation_vector = delimitation*ones(size(Data,1),1);
    data_to_write = [Data,delimitation_vector];
    
    if exist(small_filename, 'file')==2
      delete(small_filename);             % delete old file if exists
    end
    writematrix(data_to_write,small_filename);
    
else
    if isfile(small_filename)
         data_complete = readmatrix(small_filename);
         Data = data_complete(1:data_complete(1,29),1:28);
         data_away = data_complete(data_complete(1,29):end, 1:28);
    else
         error('Small dataset not found');
    end
end

%% Assign data to corresponding vector (Pos, Vel, Acc, Torque)

JointPos = Data(:,1:7);                  % Joint Position   
JointVel = Data(:,8:14);                 % Joint Velocity
JointAcc = Data(:,15:21);                % Joint Acceleration
JointTorque = Data(:,22:28);             % Torque for each joint



%% Computation of torque error between ideal-RBD and real-RBD

close all;

% initialize vector of correct size
jointTorque_computed = zeros(N,7);

% Check if number of data samples is N
if N~=size(Data,1)
    error("N is not equal to the number of data sample");
end

% compute the ideal inverse dynamics of the robot
for i=1:N
    jointTorque_computed(i,:) = inverseDynamics(robot,JointPos(i,:), JointVel(i,:), zeros(1,7));
end


if (plot_all == true)
    % Plot the errors of the first 1000 points
    figure(1)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,1),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,1),'b','DisplayName','real data')
    title("Joint 1")
    xlabel("Data point")
    ylabel("Torque")
    
    figure(2)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,2),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,2),'b','DisplayName','real data')
    title("Joint 2")
    xlabel("Data point")
    ylabel("Torque")
    
    figure(3)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,3),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,3),'b','DisplayName','real data')
    title("Joint 3")
    xlabel("Data point")
    ylabel("Torque")
    
    figure(4)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,4),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,4),'b','DisplayName','real data')
    title("Joint 4")
    xlabel("Data point")
    ylabel("Torque")
    
    figure(5)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,5),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,5),'b','DisplayName','real data')
    title("Joint 5")
    xlabel("Data point")
    ylabel("Torque")
    
    figure(6)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,6),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,6),'b','DisplayName','real data')
    title("Joint 6")
    xlabel("Data point")
    ylabel("Torque")
    
    figure(7)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,7),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,7),'b','DisplayName','real data')
    title("Joint 7")
    xlabel("Data point")
    ylabel("Torque")
    
else
    
    figure(1)
    plot([1:nb_values_plot],jointTorque_computed(1:nb_values_plot,plot_joint_nb),'k','DisplayName','ideal RBD')
    hold on
    plot([1:nb_values_plot],-1*JointTorque(1:nb_values_plot,plot_joint_nb),'b','DisplayName','real data')
    title("RBD of Joint "+string(plot_joint_nb))
    xlabel("Time step [-]")
    ylabel("Torque [Nm]")
    legend("RBD","Real Data")
end