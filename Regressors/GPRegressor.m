classdef GPRegressor
   % Definition of all attribute for this class
   properties
      Length_scale_    % Lengthscale parameter of the rbf_kernel
      Sigma_f_         % Signal standard deviation for Kernel
      Sigma_n_         % Standard deviation of the estimated noise
      K_noise_         % (K + sigma_n^2*I) where K is the Gram Matrix
      Mean_            % Mean m(x) of the GPR
      Alpha_           % Alpha coefficient of the Gaussian Process regression
      X_train_         % Training data
      L_               % Lower matrix L of the cholesky decomposition
      M_               % Number of training datapoints
   end
   
   
   methods
       
      % Constructor of the class to assign input values to properties
      function obj = GPRegressor(L, Sigma_n, Sigma_f)
         if nargin == 3
            obj.Length_scale_ = L;
            obj.Sigma_n_ = Sigma_n; 
            obj.Sigma_f_ = Sigma_f;
         elseif nargin == 2
            obj.Length_scale_ = L;
            obj.Sigma_n_ = Sigma_n; 
            obj.Sigma_f_ = 1;
         else
             error("Need to set 2 or 3 input parameters for this class!")
         end
      end
      
      
      % Computes the Gram Matrix for the input X
      function K_noise = RBF_kernel(obj,X)
          nms = -1*pdist2(X,X,'squaredeuclidean');
          K = [obj.Sigma_f_]^2*exp(1/(2*[obj.Length_scale_]^2)*nms);
          K_noise = K + [obj.Sigma_n_]^2*eye(obj.M_);
      end
      
      
      % Compute the kernel k(X_train,x_test) datapoint wise
      function K_star = RBF_kernel_star(obj, X_test)
          nms = -1*pdist2(X_test,obj.X_train_,'squaredeuclidean');
          K_star = [obj.Sigma_f_]^2*exp(1/(2*[obj.Length_scale_]^2)*nms);
      end
      
      
      % Function that assigns training data size
      function obj = training_data_size(obj, X)
          obj.M_ = size(X,1);
      end
      
      
      % Fits a GPR using Cholesky decompostion
      function obj = fit(obj, X, y, f_mean)
         obj = obj.training_data_size(X);
         obj.K_noise_ = obj.RBF_kernel(X);
         L = chol(obj.K_noise_, 'lower');
         obj.Alpha_ = L'\(L\(y-f_mean));
         obj.Mean_ = f_mean;
         obj.X_train_ = X;
         obj.L_ = L;
      end
      
      
      % Predict the target value for a new input with the GPR
      function y = predict(obj, X_test, f_mean)
          K_star = obj.RBF_kernel_star(X_test);
          y = f_mean + K_star*obj.Alpha_;
         
      end
   end
end